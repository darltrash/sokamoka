local assets = require "assets"
local mat4 = require "lib.mat4"
local lume = require "lib.lume"

local s = assets.shaders.basic3d

--s:send("dtexture", lg.newImage("assets/spr_dither.png"))

local key_vertices = {
    {-0.569885 , 0.456116 , -0.066191},
    {-0.569885 , 0.845418 , -0.066191},
    {0.007171  , 1.027674 , -0.050377},
    {-0.180583 , 0.066814 , -0.066191},
    {0.208719  , 1.234720 , -0.066191},
    {-0.180583 , 1.234720 , -0.066191},
    {0.598021  , 0.456116 , -0.066191},
    {0.598021  , 0.845418 , -0.066191},
    {0.390976  , 0.657664 , -0.050377},
    {0.208719  , 0.066814 , -0.066191},
    {0.020965  , 0.273859 , -0.050377},
    {-0.362839 , 0.643870 , -0.050377},
    {-0.180583 , 0.066814 , -0.066191},
    {0.208719  , 0.066814 , -0.066191},
    {-0.131720 , 0.042286 , -0.028264},
    {0.159856  , 0.042286 , -0.028264},
    {-0.131720 , -0.915031 , -0.028264},
    {0.159856  , -0.915031 , -0.028264},
    {-0.131720 , -0.728178 , -0.028264},
    {0.159856  , -0.728178 , -0.028264},
    {0.159856  , -0.626586 , -0.028264},
    {-0.131720 , -0.626586 , -0.028264},
    {0.159856  , -0.499338 , -0.028264},
    {-0.131720 , -0.499338 , -0.028264},
    {0.435795  , -0.915031 , -0.028264},
    {0.435795  , -0.728178 , -0.028264},
    {0.435795  , -0.626586 , -0.028264},
    {0.435795  , -0.499338 , -0.028264},
    {-0.569885 , 0.456116  , 0.091943},
    {-0.569885 , 0.845418  , 0.091943},
    {0.007171  , 1.027674  , 0.076129},
    {-0.180583 , 0.066814  , 0.091943},
    {0.208719  , 1.234720  , 0.091943},
    {-0.180583 , 1.234720  , 0.091943},
    {0.598021  , 0.456116  , 0.091943},
    {0.598021  , 0.845418  , 0.091943},
    {0.390976  , 0.657664  , 0.076129},
    {0.208719  , 0.066814  , 0.091943},
    {0.020965  , 0.273859  , 0.076129},
    {-0.362839 , 0.643870  , 0.076129},
    {-0.180583 , 0.066814  , 0.091943},
    {0.208719  , 0.066814  , 0.091943},
    {-0.131720 , 0.042286  , 0.054016},
    {0.159856  , 0.042286  , 0.054016},
    {-0.131720 , -0.915031 , 0.054016},
    {0.159856  , -0.915031 , 0.054016},
    {-0.131720 , -0.728178 , 0.054016},
    {0.159856  , -0.728178 , 0.054016},
    {0.159856  , -0.626586 , 0.054016},
    {-0.131720 , -0.626586 , 0.054016},
    {0.159856  , -0.499338 , 0.054016},
    {-0.131720 , -0.499338 , 0.054016},
    {0.435795  , -0.915031 , 0.054016},
    {0.435795  , -0.728178 , 0.054016},
    {0.435795  , -0.626586 , 0.054016},
    {0.435795  , -0.499338 , 0.054016}
}

local key_indices = {
    2, 1, 12, 1, 1, 1, 3, 2, 5, 2, 9, 2, 9, 3, 7, 3, 11, 3, 4, 4, 11, 4, 
    10, 4, 3, 5, 2, 5, 6, 5, 9, 6, 5, 6, 8, 6, 11, 7, 7, 7, 10, 7, 12, 8, 
    4, 8, 1, 8, 14, 9, 4, 9, 10, 9, 14, 10, 15, 10, 13, 10, 18, 11, 19, 
    11, 20, 11, 20, 11, 22, 11, 21, 11, 21, 11, 24, 11, 23, 11, 23, 11, 
    15, 11, 16, 11, 26, 11, 18, 11, 20, 11, 28, 11, 21, 11, 23, 11, 40, 
    12, 30, 12, 29, 12, 31, 13, 33, 13, 34, 13, 35, 14, 37, 14, 39, 14, 
    32, 15, 39, 15, 40, 15, 31, 16, 34, 16, 30, 16, 37, 17, 36, 17, 33, 
    17, 39, 18, 38, 18, 35, 18, 40, 19, 29, 19, 32, 19, 32, 9, 42, 9, 
    38, 9, 42, 20, 43, 20, 44, 20, 47, 21, 46, 21, 48, 21, 50, 21, 48, 
    21, 49, 21, 52, 21, 49, 21, 51, 21, 43, 21, 51, 21, 44, 21, 46, 21, 
    54, 21, 48, 21, 49, 21, 56, 21, 51, 21, 19, 22, 50, 22, 22, 22, 4, 
    23, 29, 23, 1, 23, 23, 9, 56, 9, 28, 9, 7, 24, 38, 24, 10, 24, 6, 9, 
    33, 9, 5, 9, 5, 25, 36, 25, 8, 25, 21, 26, 48, 26, 20, 26, 2, 27, 34, 
    27, 6, 27, 8, 26, 35, 26, 7, 26, 22, 22, 52, 22, 24, 22, 13, 9, 32, 9, 
    4, 9, 9, 28, 31, 28, 3, 28, 10, 9, 42, 9, 14, 9, 24, 22, 43, 22, 15, 
    22, 13, 29, 43, 29, 41, 29, 12, 30, 39, 30, 11, 30, 25, 26, 54, 26, 
    53, 26, 14, 31, 44, 31, 16, 31, 25, 32, 46, 32, 18, 32, 18, 32, 45, 
    32, 17, 32, 20, 9, 54, 9, 26, 9, 1, 22, 30, 22, 2, 22, 17, 22, 47, 
    22, 19, 22, 11, 33, 37, 33, 9, 33, 28, 26, 55, 26, 27, 26, 16, 26, 
    51, 26, 23, 26, 3, 34, 40, 34, 12, 34, 27, 32, 49, 32, 21, 32, 2, 
    35, 3, 35, 12, 35, 3, 36, 6, 36, 5, 36, 9, 37, 8, 37, 7, 37, 4, 38, 
    12, 38, 11, 38, 14, 9, 13, 9, 4, 9, 14, 10, 16, 10, 15, 10, 18, 11, 
    17, 11, 19, 11, 20, 11, 19, 11, 22, 11, 21, 11, 22, 11, 24, 11, 23, 
    11, 24, 11, 15, 11, 26, 11, 25, 11, 18, 11, 28, 11, 27, 11, 21, 11, 
    40, 39, 31, 39, 30, 39, 31, 40, 37, 40, 33, 40, 35, 41, 36, 41, 37, 
    41, 32, 42, 38, 42, 39, 42, 32, 9, 41, 9, 42, 9, 42, 20, 41, 20, 43,
    20, 47, 21, 45, 21, 46, 21, 50, 21, 47, 21, 48, 21, 52, 21, 50, 21,
    49, 21, 43, 2, 23, 23, 9, 51, 9, 56, 9, 7, 24, 35, 24, 38, 24, 6, 9, 
    34, 9, 33, 9, 5, 25, 33, 25, 36, 25, 21, 26, 49, 26, 48, 26, 2, 27, 30, 27, 34, 27, 8, 26, 36, 26, 35, 26, 22, 22, 50, 22, 52, 22, 13, 9, 41, 9, 32, 9, 9, 28, 37, 28, 31, 28, 10, 9, 38, 9, 42, 9, 24, 22, 52, 22, 43, 22, 13, 29, 15, 29, 43, 29, 12, 30, 40, 30, 39, 30, 25, 26, 26, 26, 54, 26, 14, 31, 42, 31, 44, 31, 25, 32, 53, 32, 46, 32, 18, 32, 46, 32, 45, 32, 20, 9, 48, 9, 54, 9, 1, 22, 29, 22, 30, 22, 17, 22, 45, 22, 47, 22, 11, 33, 39, 33, 37, 33, 28, 26, 56, 26, 55, 26, 16, 26, 44, 26, 51, 26, 3, 34, 31, 34, 40, 34, 27, 32, 55, 32, 49, 32
}

local normalize = function (x, y, z)
    local l = math.sqrt(x^2 + y^2 + z^2)
    if l == 0 then
        return 0, 0, 0, 0
    end
    return x/l, y/l, z/l, l
end

local cross = function (ax, ay, az, bx, by, bz)
    return
        ay * bz - az * by,
        az * bx - ax * bz,
        ax * by - ay * bx
end

for x=1, #key_indices, 3 do
    local a = key_vertices[key_indices[x+0]]
    local b = key_vertices[key_indices[x+1]]
    local c = key_vertices[key_indices[x+2]]
    local nx, ny, nz = cross(
        b[1] - a[1],
        b[2] - a[2],
        b[3] - a[3],

        c[1] - a[1],
        c[2] - a[2],
        c[3] - a[3]
    )

    a[4] = (a[4] or 0) + nx
    a[5] = (a[5] or 0) + ny
    a[6] = (a[6] or 0) + nz

    b[4] = (b[4] or 0) + nx
    b[5] = (b[5] or 0) + ny
    b[6] = (b[6] or 0) + nz

    c[4] = (c[4] or 0) + nx
    c[5] = (c[5] or 0) + ny
    c[6] = (c[6] or 0) + nz
end

for k, v in ipairs(key_vertices) do
    v[4], v[5], v[6] = normalize(v[4], v[5], v[6])
end

local a = lg.newMesh(
    {
        {"VertexPosition", "float", 3},
        {"VertexNormal",   "float", 3}
    }, key_vertices, "triangles"
)

a:setVertexMap(key_indices)

-- Watch this out, Unity users!

s:send("view", "column", { 
    0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, -0, -0, -6, 1
})

s:send("projection", "column", {
    1.9209821269712, 0, 0, 0, 0, -1.9209821269712, 0, 0,
    0, 0, -1.000200020002, -1, 0, 0, -0.2000200020002, 0
})

return {
    canvas = lg.newCanvas(100, 100, {format = "rgba8"}),

    t = 0,

    draw = function (self, delta)
        local w, h = lg.getDimensions()
        local d = math.max(math.floor(math.min(w, h)/100), 1)
        self.scale = lume.lerp(self.scale or d, d, delta*16)

        self.canvas:setFilter("nearest", "nearest")

        lg.push("all")
            lg.setShader(s)
            lg.setCanvas({self.canvas, depth = true})
            lg.clear({0, 0, 0, 0}, true, true)
            lg.setDepthMode("less", true)
            lg.setMeshCullMode("front")

            local model = mat4.from_euler_angle({math.sin(State.timer) * 0.2, 3, State.timer})
            s:send("model", "column", model:to_columns())

            lg.draw(a)
        lg.pop()

        -- Real potatomax graphiscs üëç
        lg.draw(self.canvas, (w/2)-(50*self.scale), (h/2)-(50*self.scale), 0, self.scale)
    end
}